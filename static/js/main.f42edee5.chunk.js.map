{"version":3,"sources":["components/Form/Form.js","components/TodoItem/TodoItem.js","components/shapes/todoShapes.js","components/TodoList/TodoList.js","components/TodosFilter/TodosFilter.js","components/TodoApp/TodoApp.js","App.js","index.js"],"names":["Form","onSubmit","useState","todoValue","setTodoValue","event","preventDefault","newTodo","id","Date","title","completed","name","value","onChange","target","type","className","placeholder","required","TodoItem","PropTypes","number","isRequired","string","bool","todo","todos","setTodos","checkTodo","deleteTodo","onClick","defaultProps","TodoList","htmlFor","map","key","TodosFilter","setFiltredType","filtredType","href","todoId","filter","TodoApp","filterTodo","useMemo","length","countActiveTodos","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f42edee5.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nexport const Form = ({ onSubmit }) => {\n  const [todoValue, setTodoValue] = useState('');\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n\n    const newTodo = {\n      id: +new Date(),\n      title: todoValue,\n      completed: false,\n    };\n\n    onSubmit(newTodo);\n    setTodoValue('');\n  };\n\n  return (\n    <form onSubmit={handleSubmit} name=\"todo\">\n      <input\n        value={todoValue}\n        onChange={event => setTodoValue(event.target.value)}\n        type=\"text\"\n        className=\"new-todo\"\n        placeholder=\"What needs to be done?\"\n        required\n      />\n    </form>\n  );\n};\n\nForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { todoShapes } from '../shapes/todoShapes';\n\nexport const TodoItem = ({ todo, todos, setTodos, checkTodo, deleteTodo }) => (\n  <li className={todo.completed ? 'completed' : ''}>\n    <div className=\"view\">\n      <input\n        onClick={() => checkTodo(todos, setTodos, todo.id)}\n        type=\"checkbox\"\n        className=\"toggle\"\n      />\n      <label>{todo.title}</label>\n      <button\n        type=\"button\"\n        className=\"destroy\"\n        onClick={() => deleteTodo(todos, setTodos, todo.id)}\n      />\n    </div>\n    <input type=\"text\" className=\"edit\" />\n  </li>\n);\n\nTodoItem.defaultProps = {\n  todos: [],\n};\n\nTodoItem.propTypes = {\n  todo: PropTypes.shape(todoShapes).isRequired,\n  todos: PropTypes.arrayOf(PropTypes.shape(todoShapes)),\n  setTodos: PropTypes.func.isRequired,\n  checkTodo: PropTypes.func.isRequired,\n  deleteTodo: PropTypes.func.isRequired,\n};\n","import PropTypes from 'prop-types';\n\nexport const todoShapes = {\n  id: PropTypes.number.isRequired,\n  title: PropTypes.string.isRequired,\n  completed: PropTypes.bool.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { TodoItem } from '../TodoItem/TodoItem';\nimport { todoShapes } from '../shapes/todoShapes';\n\nexport const TodoList = ({ todos, setTodos, checkTodo, deleteTodo }) => (\n  <section className=\"main\">\n    <input type=\"checkbox\" id=\"toggle-all\" className=\"toggle-all\" />\n    <label htmlFor=\"toggle-all\">Mark all as complete</label>\n\n    <ul className=\"todo-list\">\n      {todos.map(todo => (\n        <TodoItem\n          key={todo.id}\n          todo={todo}\n          todos={todos}\n          setTodos={setTodos}\n          checkTodo={checkTodo}\n          deleteTodo={deleteTodo}\n        />\n      ))}\n    </ul>\n  </section>\n);\n\nTodoList.defaultProps = {\n  todos: [],\n};\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(PropTypes.shape(todoShapes)),\n  setTodos: PropTypes.func.isRequired,\n  checkTodo: PropTypes.func.isRequired,\n  deleteTodo: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport const TodosFilter = ({ setFiltredType, filtredType }) => (\n  <ul className=\"filters\">\n    <li>\n      <a\n        href=\"#/\"\n        className={filtredType === 'All' ? 'selected' : ''}\n        onClick={() => setFiltredType('All')}\n      >\n        All\n      </a>\n    </li>\n\n    <li>\n      <a\n        href=\"#/active\"\n        className={filtredType === 'Active' ? 'selected' : ''}\n        onClick={() => setFiltredType('Active')}\n      >\n        Active\n      </a>\n    </li>\n\n    <li>\n      <a\n        href=\"#/completed\"\n        className={filtredType === 'Completed' ? 'selected' : ''}\n        onClick={() => setFiltredType('Completed')}\n      >\n        Completed\n      </a>\n    </li>\n  </ul>\n);\n\nTodosFilter.propTypes = {\n  setFiltredType: PropTypes.func.isRequired,\n  filtredType: PropTypes.string.isRequired,\n};\n","import React, { useState, useMemo } from 'react';\nimport { Form } from '../Form/Form';\nimport { TodoList } from '../TodoList/TodoList';\nimport { TodosFilter } from '../TodosFilter/TodosFilter';\n\nfunction countActiveTodos(todos) {\n  const activeTodos = todos.filter(\n    todo => todo.completed === false,\n  );\n\n  return activeTodos.length;\n}\n\nfunction checkTodo(todos, setTodos, todoId) {\n  const newTodos = todos.map(\n    (todo) => {\n      if (todo.id === todoId) {\n        return { ...todo, completed: !todo.completed };\n      }\n\n      return todo;\n    },\n  );\n\n  setTodos(newTodos);\n}\n\nfunction deleteTodo(todos, setTodos, todoId) {\n  const newTodos = todos.filter(\n    todo => todo.id !== todoId,\n  );\n\n  setTodos(newTodos);\n}\n\nexport const TodoApp = () => {\n  const [todos, setTodos] = useState([]);\n  const [filtredType, setFiltredType] = useState('All');\n\n  const filterTodo = useMemo(\n    () => {\n      if (filtredType === 'Completed') {\n        return todos.filter(todo => todo.completed === true);\n      }\n\n      if (filtredType === 'Active') {\n        return todos.filter(todo => todo.completed === false);\n      }\n\n      return todos;\n    }, [todos, filtredType],\n  );\n\n  function onSubmit(todo) {\n    setTodos([...todos, todo]);\n  }\n\n  return (\n    <section className=\"todoapp\">\n      <header className=\"header\">\n        <h1>todos</h1>\n        <Form onSubmit={onSubmit} />\n      </header>\n      <TodoList\n        todos={filterTodo}\n        setTodos={setTodos}\n        checkTodo={checkTodo}\n        deleteTodo={deleteTodo}\n      />\n\n      <footer className=\"footer\">\n        <span className=\"todo-count\">\n          {`${countActiveTodos(todos)} items left`}\n        </span>\n        <TodosFilter\n          setFiltredType={setFiltredType}\n          filtredType={filtredType}\n        />\n        <button type=\"button\" className=\"clear-completed\">\n          Clear completed\n        </button>\n      </footer>\n    </section>\n  );\n};\n","import React from 'react';\nimport { TodoApp } from './components/TodoApp/TodoApp';\n\nfunction App() {\n  return (\n    <TodoApp />\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './styles/index.css';\nimport './styles/todo-list.css';\nimport './styles/filters.css';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}